PROCEDURE create_family(generations)
    person *p = malloc(sizeof(person))
    IF (generations > 1) THEN
        person *parent0 = create_family(generations - 1)
        person *parent1 = create_family(generations - 1)
        p->parents[0] = parent0
        p->parents[1] = parent1
        r = random number between 0 and 1
        p->alleles[0] = parent0->alleles[r]
        r = random number between 0 and 1
        p->alleles[1] = parent1->alleles[r]
    ELSE
        p->parents[0] = NULL
        p->parents[1] = NULL
        p->alleles[0] = random_allele()
        p->alleles[1] = random_allele()
    END IF
    RETURN p
END PROCEDURE

PROCEDURE free_family(p)
    IF (p == NULL) THEN
        RETURN
    END IF
    free_family(p->parents[0])
    free_family(p->parents[1])
    free(p)
END PROCEDURE

PROCEDURE print_family(p, generation)
    IF (p == NULL) THEN
        RETURN
    END IF
    FOR (int i = 0; i < generation * INDENT_LENGTH; i++)
    PRINT " "
END FOR

IF (generation == 0) THEN
PRINT "Child (Generation " + generation + "): blood type " + p->alleles[0] + p->alleles[1] + "\n"
ELSE IF (generation == 1) THEN
PRINT "Parent (Generation " + generation + "): blood type " + p->alleles[0] + p->alleles[1] + "\n"
ELSE
FOR (int i = 0; i < generation - 2; i++)
PRINT "Great-"
END FOR
PRINT "Grandparent (Generation " + generation + "): blood type " + p->alleles[0] + p->alleles[1] + "\n"
END IF

print_family(p->parents[0], generation + 1)
print_family(p->parents[1], generation + 1)
END PROCEDURE